<?php
// $Id$

/**
 * @file
 * The Select (or other) module.
 */

/**
 * Implementation of hook_theme().
 */
function select_or_other_theme() {
  return array(
    'select_or_other' => array(
      'arguments' => array(
        'element' => NULL,
      ),
    ),
  );
}

/**
 * Theme a Select (or other) element.
 */
function theme_select_or_other($element) {
  // Load the JS file to hide/show the 'other' box when needed.
  drupal_add_js(drupal_get_path('module', 'select_or_other') .'/select_or_other.js');
  // Wrap the whole element in a div tag that the JS will use to recognize the two form fields are linked.
  return '<div class="select-or-other">'. drupal_render($element) .'</div>';
}

/**
 * Implementation of hook_elements().
 */
function select_or_other_elements() {
  $type['select_or_other'] = array(
    '#select_type' => 'select',
    '#input' => TRUE,
    '#size' => 0,
    '#multiple' => FALSE,
    '#disabled' => FALSE,
    '#process' => array('select_or_other_process'),
    '#element_validate' => array('select_or_other_element_validate'),
    '#other' => t('Other'),
    '#theme' => 'select_or_other',
  );
  return $type;
}

/**
 * Implementation of form_type_hook_value().
 */
function form_type_select_or_other_value($element, $edit = FALSE) {
  if (func_num_args() == 1) {
     return $element['#default_value'];
  }
}

/**
 * Process callback for a Select (or other) element.
 */
function select_or_other_process($element, $edit, &$form_state, $form) {

  $element['#tree'] = TRUE;
  $element['#processed'] = TRUE;
  unset($element['#type']);

  // Create the main select box
  // Note that #title, #default_value, #disabled, #multiple, #options, #attributes, #required, and #size as passed to the select box from the main element.
  $element['select'] = array(
    '#type' => $element['#select_type'],
   // '#process' => ($element['#select_type'] == 'radios') ? array('expand_radios') : array('form_expand_ahah'), // As in system_elements()
    '#title' => $element['#title'],
    '#default_value' => $element['#default_value'], // will need to handle this custom if the default value is not one of the options!!!
    '#disabled' => $element['#disabled'],
    '#multiple' => $element['#multiple'],
    '#required' => $element['#required'],
    '#size' => $element['#size'],
    '#options' => $element['#options'],
    '#attributes' => $element['#attributes'],
    '#weight' => 10,
  );

  // Remove the default value on the container level so it doesn't get rendered there.
  $element['#value'] = NULL;
  // Remove the required parameter so FAPI doesn't force us to fill in the textfield.
  $element['#required'] = NULL;

  // Now we must handle the default values.
  $other_default = array();

  $default_value = $element['select']['#default_value'];
  if (!is_array($default_value)) {
    $default_value = array(
      $default_value,
    );
  }
  foreach ($default_value as $key => $val) {
    if ($val 
        && isset($element['select']['#options']) 
        && is_array($element['select']['#options']) 
        && !array_key_exists($val, $element['select']['#options']) 
        && !in_array($val, $element['select']['#options'])) {
      // Not a valid option - add it to 'other'.
      if ($element['#other_unknown_defaults'] == 'other') {
        if ($element['#other_delimiter']) {
          $other_default[] = $val;
        }
        else {
          $other_default = array($val);
        }
      }
      elseif ($element['#other_unknown_defaults'] == 'append') {
        $element['select']['#options'][$val] = $val;
      }
    }
  }
  $other_default_string = '';
  if (!empty($other_default)) {
    $other_default_string = implode($element['#other_delimiter'], $other_default);
    if (is_array($element['select']['#default_value'])) {
      $element['select']['#default_value'][] = 'select_or_other';
    }
    else {
      $element['select']['#default_value'] = 'select_or_other';
    }
  }

  // Add in the 'other' option.
  $element['select']['#options']['select_or_other'] = $element['#other'];

  // Create the 'other' textfield.
  $element['other'] = array(
    '#type' => 'textfield',
    '#weight' => 20,
    '#default_value' => $other_default_string,
    '#disabled' => $element['#disabled'],
    '#attributes' => $element['#attributes'],
  );

  // Populate properties set specifically as #select_property or #other_property
  $sub_elements = array('select', 'other');
  foreach ($sub_elements as $sub_element) {
    foreach ($element as $key => $value) {
      if (strpos($key, '#'. $sub_element .'_') === 0) {
        $element[$sub_element][str_replace('#'. $sub_element .'_', '#', $key)] = $value;
      }
    }
    // Also add in a custom class for each.
    if (isset($element[$sub_element]['#attributes']['class'])) {
      $element[$sub_element]['#attributes']['class'] .= " select-or-other-". $sub_element; 
    }
    else {
      $element[$sub_element]['#attributes']['class'] = "select-or-other-". $sub_element; 
    }
  }

  return $element;
}

/**
 * Element validate callback for a Select (or other) element.
 */
function select_or_other_element_validate($element, &$form_state) {
  $other_selected = FALSE;
  if (is_array($element['select']['#value']) && in_array('select_or_other', $element['select']['#value'])) {
    // This is a multiselect. assoc arrays
    $other_selected = TRUE;
    $value = $element['select']['#value'];
    unset($value['select_or_other']);
    $value[$element['other']['#value']] = $element['other']['#value'];
  }
  else if (is_string($element['select']['#value']) && $element['select']['#value'] == 'select_or_other') {
    // This is a single select.
    $other_selected = TRUE;
    $value = $element['other']['#value'];
  }
  else {
    $value = $element['select']['#value'];
  }
  if ($other_selected && !$element['other']['#value']) {
    form_error($element['other'], t('!title is required', array('!title' => $element['#title'])));
  }
  if (isset($value)) {
    form_set_value($element, $value, $form_state);
    $form_state['clicked_button']['#post'][$element['#name']] = $value;  // Is this something we should do?
  }
  return $element;
}

/**
 * Test function.
 * to view, visit http://example.com/?q=select-or-other-test-form
 * You must have the permission 'access administration pages'.
 */
function select_or_other_test_form($form_state) {
  $v = &$form_state['values'];
  $form['my_field_1'] = array(
    '#type' => 'select_or_other',
    '#title' => t('My example Field'),
    '#default_value' => $v['my_field_1'] ? $v['my_field_1'] : array('Another value'),
    '#options' => array(
      'option1' => t('Option 1'),
      'option2' => t('Option 2'),
      'option3' => t('Option 3'),
    ),
    '#other' => t('Other (please type with your fingers)'),
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#other_delimiter' => ', ', // if this is FALSE only the last value will be used
    '#other_unknown_defaults' => 'other', // possible values 'append', 'ignore', 'other'  (if other specified you can also override #other_delimiter).
  );
  $form['my_field_2'] = array(
    '#type' => 'select_or_other',
    '#select_type' => 'checkboxes',
    '#title' => t('My checkboxes example'),
    '#default_value' => $v['my_field_2'] ? $v['my_field_2'] : array('Another value'),
    '#options' => array(
      'option1' => t('Option 1'),
      'option2' => t('Option 2'),
      'option3' => t('Option 3'),
    ),
    '#other' => t('Other (please type with your fingers)'),
    '#required' => TRUE,
    '#multiple' => TRUE, // this should be ignored for checkboxes
    '#other_delimiter' => ', ', // if this is FALSE only the last value will be used
    '#other_unknown_defaults' => 'append', // possible values 'append', 'ignore', 'other'  (if other specified you can also override #other_delimiter).
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

function select_or_other_test_form_submit($form, &$form_state) {
  // drupal_set_message("form_state<pre>".print_r($form_state,true));
  $form_state['storage'] = $form_state['values'];
}

/**
 * Implementation of hook_menu().
 */
function select_or_other_menu() {
  $items = array();
  $items['select-or-other-test-form'] = array(
    'title' => 'select_or_other test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('select_or_other_test_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_widget_info().
 *
 * This is a CCK hook.
 */
function select_or_other_widget_info() {
  return array(
    'select_or_other' => array(
      'label' => t('Select (or other)'),
      'field types' => array('text', 'number_integer', 'number_decimal', 'number_float'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 *
 * This is a CCK hook.
 */
function select_or_other_widget(&$form, &$form_state, $field, $items, $delta = NULL) {
  // Prepare the available options using CCK's allowed values functionality.
  $field['allowed_values'] = isset($field['widget']['available_values']) ? $field['widget']['available_values'] : '';
  $options = content_allowed_values($field);

  // Construct the element.
  $element = array(
    '#type' => $field['widget']['type'],
    '#other' => isset($field['widget']['other']) ? $field['widget']['other'] : t('Other'),
    '#default_value' => isset($items) ? $items : array(),
    '#options' => $options,
    '#select_type' => isset($field['widget']['select_type']) ? $field['widget']['select_type'] : 'select',
    '#description' => isset($field['widget']['description']) ? $field['widget']['description'] : '',
    '#other_delimiter' => isset($field['widget']['other_delimiter']) ? ($field['widget']['other_delimiter'] == 'FALSE' ? FALSE : $field['widget']['other_delimiter']) : '',
    '#multiple' => $field['multiple'],
  );
  return $element;
}

/**
 * Implementation of hook_widget_settings().
 *
 * This is a CCK hook.
 */
function select_or_other_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['available_values'] = array(
        '#type' => 'textarea',
        '#title' => t('Available values'),
        '#description' => t('A list of values that are, by default, available for selection. Enter one value per line, in the format key|label. The key is the value that will be stored in the database, and the label is what will be displayed to the user.'),
        '#default_value' => isset($widget['available_values']) ? $widget['available_values'] : '',
      );
      $form['other'] = array(
        '#type' => 'textfield',
        '#title' => t('Other description'),
        '#description' => t('Text that the user will choose when they want to supply an other value.'),
        '#default_value' => isset($widget['other']) ? $widget['other'] : t('Other'),
        '#required' => TRUE,
      );
      $form['select_type'] = array(
        '#type' => 'select',
        '#title' => t('Select Type'),
        '#description' => t('What type of select input will be used.'),
        '#options' => array(
          'select' => t('Select'),
          'radios' => t('Radios'),
          'checkboxes' => t('Checkboxes'),
        ),
        '#default_value' => isset($widget['select_type']) ? $widget['select_type'] : 'select',
        '#required' => TRUE,
      );
      $form['other_unknown_defaults'] = array(
        '#type' => 'select',
        '#title' => t('Unknown defaults'),
        '#description' => t("If the default value is unknown (not a valid option), what should we do?"),
        '#options' => array(
          'append' => t('Append unknown default values to the options'),
          'ignore' => t('Ignore unknown default values'),
          'other' => t('Add unknown default values to the <em>other</em> textfield.'),
        ),
        '#default_value' => isset($widget['other_unknown_defaults']) ? $widget['other_unknown_defaults'] : 'append',
        '#required' => TRUE,
      );
      $form['other_delimiter'] = array(
        '#type' => 'textfield',
        '#title' => t('Other delimiter'),
        '#description' => t("Delimiter string to delimit multiple 'other' values into the <em>other</em> textfield.  If you enter <em>FALSE</em> only the last value will be used."),
        '#default_value' => isset($widget['other_delimiter']) ? $widget['other_delimiter'] : ', ',
        '#required' => TRUE,
      );
      return $form;

    case 'save':
      return array('available_values', 'other', 'select_type');
  }
}
